..  image:: https://github.com/thomasvrussell/sfft/blob/master/docs/sfft_logo.png

Package Description
-------------------
Saccadic Fast Fourier Transform (SFFT) is an algorithm for image subtraction in Fourier space.

Installation
-----------
sfft can be simply installed in your Python environment by

- python setup.py install

sfft has the following three backends to perform the image subtraction.

- ``NumPy backend``: sfft will totally run on the CPU devices. No other dependencies are required for this backend.
- ``PyCUDA backend``: The core functions of sfft are written in `PyCUDA <https://github.com/inducer/pycuda>`_ and `Scikit-Cuda <https://github.com/lebedov/scikit-cuda>`_. Users need to install PyCUDA and Scikit-Cuda according to their CUDA version to enable this backend. Note this backend require GPU device(s) with double-precision support.
- ``CuPy backend``: The core functions of sfft are written in `CuPy <https://github.com/cupy/cupy>`_. Users need to install CuPy according to their CUDA version to enable this backend. Note this backend require GPU device(s) with double-precision support.

For example, you may enable the GPU backends (i.e., PyCUDA backend and CuPy backend) for CUDA 10.1 via

- conda install -c conda-forge cudatoolkit=10.1
- pip install pycuda==2020.1 scikit-cuda==0.5.3 cupy-cuda101

If your Python environment already has some version of llvmlite (a package required by NumPy backend) before installing sfft. 
The setup.py in sfft cannot properly update llvmlite to the desired version, then you may get errors related to Numba or llvmlite. 
If so, please manually install llvmlite by 

- pip install llvmlite==0.36.0 â€”ignore-installed

Finally, you need further to install additional astronomical softwares for sfft.

- `SExtractor <https://github.com/astromatic/sextractor>`_: SExtractor is required for sfft subtraction, as it enables sfft to determine a proper pixel mask over the input image-pair before the image subtraction (this is critical for a more reasonable parameter-solving). Note that we have wrapped SExtractor into a Python module ``sfft.utils.pyAstroMatic.PYSEx``, so you also get an alternative way to trigger SExtractor.
- `SWarp <https://github.com/astromatic/swarp>`_ (optional): This is not required for sfft subtraction itself. However, it is normally necessary to align the input image-pair before image subtraction. We have additionally wrapped SWarp into a Python module ``sfft.utils.pyAstroMatic.PYSWarp`` so that you can align images in a more Pythonic way.

Quick start guide
-----------
There are three examples in the test directory, and you may use the Python scripts in the subdirectory to conduct the tests.

- subtract_test_crowded_flavor: subtraction test for the crowded flavor of sfft with ZTF M31 observations (use module ``sfft.EasyCrowdedPacket``).
- subtract_test_sparse_flavor: subtraction test for the sparse flavor of sfft with DECam observations (use module ``sfft.EasySparsePacket``).
- difference_noise_decorrelation: noise decorrelation test for a generic case, i.e., the difference image is generated by image subtraction between a coadded reference image and a coadded science image, each stacked from 5 DECam individual observations with PSF homogenization (use module ``sfft.utils.DeCorrelationCalculator``).

Software options
-----------
- detailed parameters for crowded flavor of sfft: help(``sfft.EasyCrowdedPacket``).
- detailed parameters for sparse flavor of sfft: help(``sfft.EasySparsePacket``).

Development
-----------
The latest source code can be obtained from
`<https://github.com/thomasvrussell/sfft>`_.

When submitting bug reports or questions via the `issue tracker 
<https://github.com/thomasvrussell/sfft/issues>`_, please include the following 
information:

- OS platform.
- Python version.
- CUDA, PyCUDA and CuPy version.
- Version of sfft.

Citing
------
Lei Hu, Lifan Wang, Xingzhuo Chen, 2021
